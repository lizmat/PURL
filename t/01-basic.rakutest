use Test;
use Identity::Utils:ver<0.0.19+>:auth<zef:lizmat> <
  api auth short-name ver
>;
use PURL;

my @identities = <
  SBOM::CycloneDX:ver<0.0.7>:auth<zef:lizmat>
  JSON::Fast:ver<0.19>:auth<cpan:TIMOTIMO>
  Cro::RPC::JSON:ver<0.1.6>:auth<zef:vrurg>:api<2>
>;

plan 25 + @identities;

my $purl = PURL.new("pkg:maven/org.apache.commons/io@1.3.4");
isa-ok $purl, PURL;

is $purl.type,      'maven',              'is the type correct';
is $purl.namespace, 'org.apache.commons', 'is the namespace correct';
is $purl.name,      'io',                 'is the name correct';
is $purl.version,   '1.3.4',              'is the version correct';
is-deeply $purl.qualifiers, Map.new,      'are there no qualifiers';
ok !$purl.subpath.defined,                'is the subpath not present';

is $purl.gist, $purl.Str, 'Does it gist as the stringification';

my @types := PURL::Type.supported-types;
ok +@types, 'got at least one type';

subtest "checking all descriptions and examples" => {
    plan 2 * @types;

    for @types -> $class {
        ok !$class.description.contains("No description"),
          "$class.^name() has description";
        ok +$class.examples,
          "$class.^name() has examples";
    }
}

for @identities -> $identity {
    subtest "checking Raku identity '$identity'" => {
        plan 4;

        my $purl := PURL.from-identity($identity);
        isa-ok $purl, PURL;

        is $purl.namespace,  auth($identity), 'is auth correct';
        is $purl.name, short-name($identity), 'is name correct';

        is $purl.version,
          ver($identity) ~ (":$_" with api($identity)),
          'is version correct';
    }
}

for <PURL PURL:ver<*> > {
    my $purl := PURL.from-identity($_);
    is $purl, 'pkg:raku/PURL', "is the stringification correct for '$_'";
    is $purl.type, 'raku', "is the type correct for '$_'";
    is $purl.name, 'PURL', "is the name correct for '$_'";
    is-deeply $purl.namespace, Str, "is the namespace absent for '$_'";
    is-deeply $purl.version,   Str, "is the version absent for '$_'";
}

is PURL.from-identity("PURL:api<2>"), 'pkg:raku/PURL@*:2',
  'is stringification without version but with api correct';

dies-ok { PURL.from-identity("PURL", :must-be-pinned) },
  'throws when an unpinned identity is given, and it must be pinned';

$purl = PURL.new("pkg:raku/zef:lizmat/PURL?sw_vers=vers:raku/<2.0|>=1.0");
is $purl,
  "pkg:raku/zef:lizmat/PURL?sw_vers=vers:raku/%3E=1.0%20%7C%20%3C2.0",
  "did the software version get canonicalized correctly";
is $purl.VERS, "vers:raku/>=1.0 | <2.0", 'is the VERS correct';

is-deeply PURL("pkg:raku/zef:lizmat/PURL?sw_vers=foo"), False,
  "does an illegal sw_vers value invalidate a PURL";

# vim: expandtab shiftwidth=4
