use Test;
use PURL;
use JSON::Fast:ver<0.19+>:auth<cpan:TIMOTIMO>;

# Tests copied from https://github.com/package-url/purl-spec/tree/main/tests
my @files = (
  $*PROGRAM.sibling("tests/spec").dir.grep(*.basename.ends-with(".json")).Slip,
  $*PROGRAM.sibling("tests/types").dir.grep(*.basename.ends-with(".json")).Slip
).sort(*.basename);

plan 1 + @files;

ok @files, 'did we get any test files';

for @files -> $io {
    my @tests := from-json($io.slurp, :immutable)<tests>;

    subtest "testing $io" => {
        plan +@tests;

        for @tests -> %test {
            %test<expected_failure>
              ?? test-for-failure(%test)
              !! test-for-success(%test)
        }
    }
}

#- test-for-failure ------------------------------------------------------------
sub test-for-failure(%test) {
    subtest "Failure: %test<description>" => {
        plan 1;

        my $input := %test<input>;
        if $input ~~ Map {
            dies-ok { PURL.new(|$input) }, "Did Map input fail";
        }
        else {
            todo "Invalid conan tests semantics unclear"
              if $input.starts-with('pkg:conan');
            is-deeply PURL($input), False, "Did '$input' fail";
        }
    }
}

#- test-for-success ------------------------------------------------------------
sub test-for-success(%test) {
    my $test-type := %test<test_type>;

    subtest "$test-type.tc() success: %test<description>" => {
        my $input  := %test<input>;
        my $output := %test<expected_output>;

        if $test-type eq 'parse' {
            my $purl := PURL.new($input);

            is $purl.scheme, 'pkg',         "Was the scheme correct";
            is $purl.type,   $output<type>, "Was the type correct";

            for <namespace name version subpath> -> $field {
                with $output{$field} {
                    todo "Unclear semantics"
                      if $field eq 'subpath'
                      && .contains(/ "/." "."? "/" /);
                    is $purl."$field"(), $_,
                      "Is $field correct";
                }
                else {
                    ok !$purl."$field"().defined,
                      "Is $field undefined";
                }
            }

            with $output<qualifiers> -> %qualifiers {
                is-deeply $purl.qualifiers, %qualifiers,
                  "Are the qualifiers correct";
            }

            done-testing;
        }
        elsif $test-type eq 'roundtrip' {
            plan 1;

            todo "encoding confusion"
              if $output.starts-with(
                    "pkg:deb/debian/attr"
                  | "pkg:generic/bitwarderl"
                  | "pkg:npm/"
                  | "pkg:oci/"
                 );
            is PURL.new($input), $output, 'is roundtrip correct';
        }
        elsif $test-type eq 'build' {
            plan 1;

            $input := $input.grep(*.value.defined).Map;
            my $purl := PURL.new(|$input);

            todo "encoding confusion"
              if $output.starts-with(
                    "pkg:deb/debian/attr"
                  | "pkg:generic/bitwarderl"
                  | "pkg:npm/"
                  | "pkg:oci/"
                 );
            is $purl, $output, 'did the build succeed';
        }
        else {
            die "huh: $test-type";
        }
    }
}

# vim: expandtab shiftwidth=4
