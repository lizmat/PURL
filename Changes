Revision history for PURL

{{$NEXT}}
    - Add the "VERS" method to return any VERS object
      associated

0.0.11  2025-07-31T19:35:17+02:00
    - Fixed dependency on URI::Encode that went AWOL

0.0.10  2025-07-31T18:51:01+02:00
    - Added special handling for "sw_vers" qualifiers,
      which should be valid VERS specifications
    - Added dependency on VERS
    - Fixed an issue in checking for absence of namespace
      for the "raku" type
    - Bumped dependency on Identity::Utils because we can

0.0.9  2025-07-29T14:45:33+02:00
    - Make .from-identity accept unpinned dependencies
      by default, because these will be needed to allow
      for requirement indications.  Added a :must-be-pinned
      named argument to obtain the old behaviour
    - Disarm PURL::Type() failures for quieter testing

0.0.8  2025-07-28T13:51:33+02:00
    - Changed API value in version from "/" to ":" to
      be more in line with other PURL version specifications
    - Added dependency on "URI::encode" to get proper
      URI encoding / decoding
    - Converted all test-suite tests to the new format
      provided by the purl-spec repo
    - Added raku specific tests

0.0.7  2025-07-26T16:10:06+02:00
    - Disallow /Perl6 references in "cpan" Package URLs,
      refer to the "raku" Package URL in error message.
      Spotted by sjn++

0.0.6  2025-07-25T14:22:37+02:00
    - Bumped dependency on Identity::Utils because we can
    - Various tweaks and fixes + additional testing
    - Actually documented the "from-identity" method
    - Added sponsor + repository reference

0.0.5  2025-07-21T13:22:28+02:00
    - Bumped dependency on Identity::Utils because we can

0.0.4  2025-07-20T12:47:06+02:00
    - Made sure that gisting stringifies
    - Added dependency on "Identity::Utils"
    - Added preliminary support for the "raku" type
    - Added method "from-identity" to create a PURL from a
      Raku module identity

0.0.3  2025-07-19T20:18:23+02:00
    - Abstracted the different checking / canonicalization
      behaviours into a PURL::Type base class, and a subclass
      for each supported type.  And use that logic when
      instantiating a PURL object
    - Added introspection methods "description" and "examples"
      to PURL::Type
    - UnTODO almost all TODO tests in test-suite
    - Add a test-file that checks the validity of all PURLs
      as given in the PURL documentation

0.0.2  2025-07-17T20:23:17+02:00
    - Fix thinko in validity check
    - Make stringification return the canonical URL
    - Added stringification tests (with some todo's)

0.0.1  2025-07-17T16:12:27+02:00
    - Initial version
